<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript学习笔记</title>
    <link href="/2021/11/13/JavaScript/"/>
    <url>/2021/11/13/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript学习笔记"><a href="#JavaScript学习笔记" class="headerlink" title="JavaScript学习笔记"></a>JavaScript学习笔记</h1><h2 id="1-语法专题"><a href="#1-语法专题" class="headerlink" title="1. 语法专题"></a>1. 语法专题</h2><h3 id="1-1-数据类型的转换"><a href="#1-1-数据类型的转换" class="headerlink" title="1.1 数据类型的转换"></a>1.1 数据类型的转换</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = y ? <span class="hljs-number">1</span> : <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2. 强制转换"></a>2. 强制转换</h4><h5 id="2-1-Number"><a href="#2-1-Number" class="headerlink" title="2.1 Number()"></a>2.1 Number()</h5><p>将任意类型的值转化成数值</p><p><strong>（1）原始类型值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Number</span>(<span class="hljs-number">324</span>) <span class="hljs-comment">// 324</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;324&#x27;</span>) <span class="hljs-comment">// 324</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;324abc&#x27;</span>) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 空字符串转为0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p><code>Number</code>函数将字符串转为数值，要比<code>parseInt</code>函数严格很多.基本上，只要有一个字符无法转成数值，整个字符串就会被转为<code>NaN</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;42 cats&#x27;</span>) <span class="hljs-comment">// 42</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;42 cats&#x27;</span>) <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>parseInt</code>逐个解析字符，而<code>Number</code>函数整体转换字符串的类型。</p><p>另外，<code>parseInt</code>和<code>Number</code>函数都会自动过滤一个字符串前导和后缀的空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;\t\v\r12.34\n&#x27;</span>) <span class="hljs-comment">// 12</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-string">&#x27;\t\v\r12.34\n&#x27;</span>) <span class="hljs-comment">// 12.34</span><br></code></pre></td></tr></table></figure><p><strong>（2）对象</strong></p><p><code>Number</code>方法的参数是对象时，将返回<code>NaN</code>，除非是包含单个数值的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Number</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Number</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">Number</span>([<span class="hljs-number">5</span>]) <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p><code>Number</code>背后的转换规则:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">Number</span>(obj) <span class="hljs-comment">// NaN</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj.valueOf() === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>  <span class="hljs-built_in">Number</span>(obj.toString());<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-built_in">Number</span>(obj.valueOf());<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-String"><a href="#2-2-String" class="headerlink" title="2.2 String()"></a>2.2 String()</h5><p><code>String</code>函数可以将<strong>任意类型的值</strong>转化成<strong>字符串</strong>，转换规则如下：</p><p><strong>（1）原始类型值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// &quot;123&quot;</span><br><span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;abc&#x27;</span>) <span class="hljs-comment">// &quot;abc&quot;</span><br><span class="hljs-built_in">String</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// &quot;true&quot;</span><br><span class="hljs-built_in">String</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-built_in">String</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// &quot;null&quot;</span><br></code></pre></td></tr></table></figure><p><strong>（2）对象</strong></p><p><code>String</code>方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-built_in">String</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// &quot;1,2,3&quot;</span><br></code></pre></td></tr></table></figure><p><strong>转换规则</strong></p><ol><li>先调用<strong>对象自身的<code>toString</code><strong>方法。如果返回</strong>原始类型的值</strong>，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>toString</code>方法返回的是<strong>对象</strong>，再调用原对象的**<code>valueOf</code>方法**。如果<code>valueOf</code>方法返回原始类型的值，则对该值使用<code>String</code>函数，不再进行以下步骤。</li><li>如果<code>valueOf</code>方法返回的是对象，就报错。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">String</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;)<br><span class="hljs-comment">// &quot;[object Object]&quot;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-built_in">String</span>(&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;.toString())<br><span class="hljs-comment">// &quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-Boolean"><a href="#2-3-Boolean" class="headerlink" title="2.3 Boolean()"></a>2.3 Boolean()</h5><p><code>Boolean()</code>函数可以将<strong>任意类型的值</strong>转为布尔值。</p><p>它的转换规则相对简单：除了以下五个值的转换结果为<code>false</code>，其他的值全部为<code>true</code>。</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>0</code>（包含<code>-0</code>和<code>+0</code>）</li><li><code>NaN</code></li><li><code>&#39;&#39;</code>（空字符串）</li></ul><p>当然，<code>true</code>和<code>false</code>这两个布尔值不会发生变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>所有对象（包括空对象）的转换结果都是<code>true</code>，甚至连**<code>false</code>对应的布尔对象**<code>new Boolean(false)</code>也<strong>是<code>true</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Boolean</span>(&#123;&#125;) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Boolean</span>([]) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Boolean</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="3-自动转换（强制转换为基础）"><a href="#3-自动转换（强制转换为基础）" class="headerlink" title="3. 自动转换（强制转换为基础）"></a>3. 自动转换（强制转换为基础）</h4><p>自动转换的规则：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用<code>String()</code>函数进行转换。如果该位置既可以是字符串，也可能是数值，那么默认转为数值。</p><p>由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用<code>Boolean()</code>、<code>Number()</code>和<code>String()</code>函数进行显式转换。</p><p><strong>3.1 自动转换为布尔值</strong></p><p>JavaScript 遇到预期为布尔值的地方（比如**<code>if</code>语句<strong>的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用</strong><code>Boolean()</code>函数**。</p><p><strong>3.2 自动转换为字符串</strong></p><p>JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值<strong>转为原始类型的值</strong>，再将原始类型的值转为字符串。</p><p><strong>3.3 自动转换为数值</strong></p><p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用<code>Number()</code>函数。</p><blockquote><p>除了加法运算符（<code>+</code>）有可能把运算子转为字符串，<strong>其他运算符都会把运算子自动转成数值</strong>。</p></blockquote><blockquote><p>注意：**<code>null</code>转为数值时为<code>0</code>，而<code>undefined</code>转为数值时为<code>NaN</code>。**</p></blockquote><h3 id="1-2-错误处理机制"><a href="#1-2-错误处理机制" class="headerlink" title="1.2 错误处理机制"></a>1.2 错误处理机制</h3><h4 id="1-Error实例对象"><a href="#1-Error实例对象" class="headerlink" title="1. Error实例对象"></a>1. Error实例对象</h4><p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个<strong>错误对象</strong>。JavaScript 原生<strong>提供<code>Error</code>构造函数</strong>，所有抛出的错误都是这个构造函数的<strong>实例</strong>。</p><p>Error的属性</p><ul><li><strong>message</strong>：错误提示信息</li><li><strong>name</strong>：错误名称（非标准属性）</li><li><strong>stack</strong>：错误的堆栈（非标准属性）</li></ul><h4 id="2-原生错误类型"><a href="#2-原生错误类型" class="headerlink" title="2. 原生错误类型"></a>2. 原生错误类型</h4><p><code>Error</code>实例对象是最一般的错误类型，在它的基础上，JavaScript 还定义了其他6种错误对象。也就是说，存在**<code>Error</code>的6个派生对象****。</p><p><strong>2.1 SyntaxError 对象</strong></p><p><code>SyntaxError</code>对象是解析代码时发生的<strong>语法错误</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 变量名错误</span><br><span class="hljs-keyword">var</span> 1a;<br><span class="hljs-comment">// Uncaught SyntaxError: Invalid or unexpected token</span><br><br><span class="hljs-comment">// 缺少括号</span><br><span class="hljs-built_in">console</span>.log <span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-comment">// Uncaught SyntaxError: Unexpected string</span><br></code></pre></td></tr></table></figure><p><strong>2.2 ReferenceError 对象</strong></p><p><code>ReferenceError</code>对象是<strong>引用一个不存在的变量</strong>时发生的错误</p><p>另一种触发场景是，将一个<strong>值分配给无法分配的对象</strong>，比如对函数的运行结果赋值。</p><p><strong>2.3 RangeError 对象</strong></p><p><code>RangeError</code>对象是一个值<strong>超出有效范围</strong>时发生的错误。主要有几种情况，一是数组长度为负数，二是<code>Number</code>对象的方法参数超出范围，以及函数堆栈超过最大值。</p><p><strong>2.4 TypeError 对象</strong></p><p><code>TypeError</code>对象是变量或参数<strong>不是预期类型</strong>时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用<code>new</code>命令，就会抛出这种错误，因为<code>new</code>命令的参数应该是一个构造函数。</p><p><strong>2.5 URLError 对象</strong></p><p><code>URIError</code>对象是 URI 相关函数的<strong>参数不正确</strong>时抛出的错误，主要涉及<code>encodeURI()</code>、<code>decodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURIComponent()</code>、<code>escape()</code>和<code>unescape()</code>这六个函数。</p><p>2.6 EvalError 对象</p><p><code>eval</code>函数没有被正确执行时，会抛出<code>EvalError</code>错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。</p><h5 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7 总结"></a>2.7 总结</h5><p>以上这6种派生错误，连同原始的<code>Error</code>对象，都是<strong>构造函数</strong>。开发者可以使用它们，手动生成错误对象的实例。这些构造函数都接受一个参数，代表错误提示信息（message）。</p><h4 id="3-自定义错误"><a href="#3-自定义错误" class="headerlink" title="3. 自定义错误"></a>3. 自定义错误</h4><p>除了 JavaScript 原生提供的七种错误对象，还可以定义自己的错误对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">UserError</span>(<span class="hljs-params">message</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.message = message || <span class="hljs-string">&#x27;默认信息&#x27;</span>;<br>  <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;UserError&#x27;</span>;<br>&#125;<br><br>UserError.prototype = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>();<br>UserError.prototype.constructor = UserError;<br></code></pre></td></tr></table></figure><p>上面代码自定义一个错误对象<code>UserError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> UserError(<span class="hljs-string">&#x27;这是自定义的错误！&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="4-throw-语句"><a href="#4-throw-语句" class="headerlink" title="4. throw 语句"></a>4. throw 语句</h4><p><code>throw</code>语句的作用是手动中断程序执行，抛出一个错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = -<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (x &lt;= <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;x 必须为正数&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// Uncaught Error: x 必须为正数</span><br></code></pre></td></tr></table></figure><h4 id="5-try…catch-结构"><a href="#5-try…catch-结构" class="headerlink" title="5. try…catch 结构"></a>5. try…catch 结构</h4><p>一旦发生错误，程序就中止执行了。JavaScript 提供了<code>try...catch</code>结构，允许对错误进行处理，选择是否往下执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;出错了!&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot;: &quot;</span> + e.message);<br>  <span class="hljs-built_in">console</span>.log(e.stack);<br>&#125;<br><span class="hljs-comment">// Error: 出错了!</span><br><span class="hljs-comment">//   at &lt;anonymous&gt;:2:9</span><br><span class="hljs-comment">//   ...</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>try</code>代码块抛出错误（上例用的是<code>throw</code>语句），JavaScript 引擎就立即把代码的执行，<strong>转到<code>catch</code>代码块</strong>，或者说<strong>错误（Error）被<code>catch</code>代码块捕获了</strong>。<code>catch</code>接受一个参数，表示<code>try</code>代码块抛出的值。</p><blockquote><p>如果你不确定某些代码是否会报错，就可以把它们放在<code>try...catch</code>代码块之中，便于进一步对错误进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">try</span> &#123;<br>  f();<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>  <span class="hljs-comment">// 处理错误</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p><strong><code>catch</code>代码块捕获错误之后，程序不会中断，会按照正常流程继续执行下去。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;出错了&quot;</span>;<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">222</span>);<br><span class="hljs-comment">// 111</span><br><span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><p>为了捕捉不同类型的错误，<code>catch</code>代码块之中可以加入判断语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">try</span> &#123;<br>  foo.bar();<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">EvalError</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot;: &quot;</span> + e.message);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">RangeError</span>) &#123;<br>    <span class="hljs-built_in">console</span>.log(e.name + <span class="hljs-string">&quot;: &quot;</span> + e.message);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><h4 id="6-finally-代码块"><a href="#6-finally-代码块" class="headerlink" title="6. finally 代码块"></a>6. finally 代码块</h4><p><code>try...catch</code>结构允许在最后添加一个<code>finally</code>代码块，表示不管是否出现错误，都必需在最后运行的语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleansUp</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;出错了……&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;此行不会执行&#x27;</span>);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;完成清理工作&#x27;</span>);<br>  &#125;<br>&#125;<br><br>cleansUp()<br><span class="hljs-comment">// 完成清理工作</span><br><span class="hljs-comment">// Uncaught Error: 出错了……</span><br><span class="hljs-comment">//    at cleansUp (&lt;anonymous&gt;:3:11)</span><br><span class="hljs-comment">//    at &lt;anonymous&gt;:10:1</span><br></code></pre></td></tr></table></figure><p>上面代码中，由于没有<code>catch</code>语句块，<strong>一旦发生错误，代码就会中断执行。中断执行之前，会先执行<code>finally</code>代码块，然后再向用户提示报错信息。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">idle</span>(<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;result&#x27;</span>;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;FINALLY&#x27;</span>);<br>  &#125;<br>&#125;<br><br>idle(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-comment">// hello</span><br><span class="hljs-comment">// FINALLY</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>try</code>代码块<strong>没有发生错误</strong>，而且里面还<strong>包括<code>return</code>语句，但是<code>finally</code>代码块依然会执行</strong>。而且，这个函数的返回值还是<code>result</code>。<u><strong><code>return</code>语句的执行是排在<code>finally</code>代码之前</strong></u>，只是<strong>等<code>finally</code>代码执行完毕后才返回</strong>。</p><p>下面是<code>finally</code>代码块用法的典型场景。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">openFile();<br><br><span class="hljs-keyword">try</span> &#123;<br>  writeFile(Data);<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>  handleError(e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>  closeFile();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码首先打开一个文件，然后在<code>try</code>代码块中写入文件，如果没有发生错误，则运行<code>finally</code>代码块关闭文件；一旦发生错误，则先使用<code>catch</code>代码块处理错误，再使用<code>finally</code>代码块关闭文件。</p><p><strong>下面的例子充分反映了<code>try...catch...finally</code>这三者之间的执行顺序。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;bug&#x27;</span>;<br>  &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 这句原本会延迟到 finally 代码块结束再执行</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>); <span class="hljs-comment">// 不会运行</span><br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 这句会覆盖掉前面那句 return</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>); <span class="hljs-comment">// 不会运行</span><br>  &#125;<br><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>); <span class="hljs-comment">// 不会运行</span><br>&#125;<br><br><span class="hljs-keyword">var</span> result = f();<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 3</span><br><br>result<br><span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>catch</code>代码块<strong>结束执行（return）之前</strong>，会先执行<code>finally</code>代码块。</p><p><code>catch</code>代码块之中，触发<strong>转入<code>finally</code><strong>代码块的标志，</strong>不仅有<code>return</code>语句，还有<code>throw</code>语句。</strong></p><p><strong><code>try</code>代码块内部，还可以再使用<code>try</code>代码块。</strong></p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scilab"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    consle.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Hello world!&#x27;</span>); <span class="hljs-comment">// 报错（console拼错了）</span><br>  &#125;<br>  finally &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Finally&#x27;</span>);<br>  &#125;<br>  console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;Will I run?&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">error</span>) &#123;<br>  console.<span class="hljs-built_in">error</span>(error.message);<br>&#125;<br><span class="hljs-comment">// Finally</span><br><span class="hljs-comment">// consle is not defined</span><br></code></pre></td></tr></table></figure><p>上面代码中，<code>try</code>里面还有一个<code>try</code>。内层的<code>try</code>报错（<code>console</code>拼错了），这时会执行内层的<code>finally</code>代码块，然后抛出错误，被外层的<code>catch</code>捕获。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown写法</title>
    <link href="/2021/11/12/Markdown%E5%86%99%E6%B3%95/"/>
    <url>/2021/11/12/Markdown%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h1><h2 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sequence">李雷 -&gt; 韩梅梅: Hello 梅梅, How are you?<br>Note right of 韩梅梅: 韩梅梅心想<br>韩梅梅 --&gt; 李雷: I&#x27;m fine, thanks, and you?<br></code></pre></td></tr></table></figure><h2 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 闹钟响起<br>op=&gt;operation: 与床板分离<br>cond=&gt;condition: 分离成功?<br>e=&gt;end: 快乐的一天<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br></code></pre></td></tr></table></figure><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><pre><code class=" mermaid">gantt        dateFormat  YYYY-MM-DD        title 快乐的生活        section 吃一把鸡就学习        学习            :done,    des1, 2014-01-06,2014-01-09        疯狂学习               :active,  des2, 2014-01-09, 3d        继续疯狂学习               :         des3, after des2, 5d        吃鸡！               :         des4, after des3, 4d        section 具体内容        学习Python :crit, done, 2014-01-06,72h        学习C++          :crit, done, after des1, 2d        学习Lisp             :crit, active, 3d        学习图形学        :crit, 4d        跳伞           :2d        打枪                      :2d</code></pre><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li><p>加粗： <code>Ctrl + B</code></p></li><li><p>撤销： <code>Ctrl + Z</code></p></li><li><p>字体倾斜 ：<code>Ctrl+I</code></p></li><li><p>下划线：<code>Ctrl+U</code></p></li><li><p>多级标题： <code>Ctrl + 1~6</code></p></li><li><p>有序列表：<code>Ctrl + Shift + [</code></p></li><li><p>无序列表：<code>Ctrl + Shift + ]</code></p></li><li><p>降级快捷键 ：<code>Tab</code></p></li><li><p>升级快捷键：<code>Shift + Tab</code></p></li><li><p>插入链接： <code>Ctrl + K</code></p></li><li><p>插入公式： <code>Ctrl + Shift + M</code></p></li><li><p>行内代码： <code>Ctrl + Shift + K</code></p></li><li><p>插入图片： <code>Ctrl + Shift + I</code></p></li><li><p>返回Typora顶部：<code>Ctrl+Home</code></p></li><li><p>返回Typora底部 ：<code>Ctrl+End</code></p></li><li><p>创建表格 ：<code>Ctrl+T</code></p></li><li><p>选中某句话 ：<code>Ctrl+L</code></p></li><li><p>选中某个单词 ：<code>Ctrl+D</code></p></li><li><p>选中相同格式的文字 ：<code>Ctrl+E</code></p></li><li><p>搜索: <code>Ctrl+F</code></p></li><li><p>搜索并替换 ：<code>Ctrl+H</code></p></li><li><p>删除线 ：<code>Alt+Shift+5</code></p></li><li><p>引用 ：<code>Ctrl+Shift+Q</code></p></li><li><p>生成目录：<code>[TOC]+Enter</code></p><p>注：一些实体符号需要在实体符号之前加” \ ”才能够显示</p></li></ul><p>作者：徐太尉<br>链接：<a href="https://zhuanlan.zhihu.com/p/293557841">https://zhuanlan.zhihu.com/p/293557841</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="区域元素"><a href="#区域元素" class="headerlink" title="区域元素"></a>区域元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">YAML FONT Matters<br></code></pre></td></tr></table></figure><p>在文章的最上方输入—，按换行键产生，然后在里面输入内容即可。</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>按换行键[Enter]建立新的一行,按<code>Shift</code>+<code>Enter</code>可以创建一个比段落间距更小的行间距。可在行尾插入打断线，禁止向后插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">打断线&lt;br/&gt;后面的内容将自动换行<br></code></pre></td></tr></table></figure><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>开头#的个数表示，空格+文字。标题有1~6个级别，#表示开始，按换行键结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text"># 一级标题 快捷键为 Ctrl + 1<br>## 二级标题 快捷键为 Ctrl + 2<br>......<br>###### 六级标题 快捷键为 Ctrl + 6<br></code></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>斜体以**或__括住</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">*这是斜体字体1*_这是斜体字体2_<br></code></pre></td></tr></table></figure><p><em>这是斜体字体1</em><br><em>这是斜体字体2</em></p><p>加粗<br>开头<code>**</code>，结尾<code>**</code>。<br>或者开头<code>__</code>,结尾<code>__</code>(两个短横线)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">**这是加粗字体1** __这是加粗字体2__<br></code></pre></td></tr></table></figure><p>这是加粗字体1<br>这是加粗字体2</p><p>删除线<br>开头<code>~~</code>，结尾<code>~~</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">~~这是错误文字~~<br></code></pre></td></tr></table></figure><p>这是错误文字</p><p>下划线使用HTML标签<u>下划线</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;u&gt;下划线&lt;/u&gt;<br></code></pre></td></tr></table></figure><p>下划线</p><p>高亮<br><code>==内容==</code>，需要自己在偏好设置里面打开这项功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">==高亮==<br>高亮<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>行内输入代码块快捷键： <code>Ctrl + Shift + K</code></p><ol><li>开头```+语言名，开启代码块，换行键换行，光标下移键跳出<br>示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">print(&quot;hello,python!&quot;&quot;)<br></code></pre></td></tr></table></figure><ol><li>用两个`在正常段落中表示代码<br>例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Use the `printf()`function.<br></code></pre></td></tr></table></figure><p>Use the <code>printf()</code>function.</p><h3 id="数学式"><a href="#数学式" class="headerlink" title="数学式"></a>数学式</h3><p>打开Typora选择数学模块</p><ul><li>点击“段落”—&gt;“公式块”</li><li>快捷键Ctrl+Shift+m</li><li><code>“$$”+回车</code></li></ul><p>以上三种方式都能打开数学公式的编辑栏。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">输入$，然后按ESC键，之后输入Tex命令，可预览<br>例如：<br>$\lim_&#123;x\to\infty&#125;\exp(-x)=0$<br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/v2-c0139796d5848b706c9f2f4d79c7a749_b.png" alt="img"></p><p>下标使用~~括住内容。需要自己在偏好设置里面打开这项功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">H~2~O<br></code></pre></td></tr></table></figure><p>H2O</p><p>上标</p><p>使用^括住内容。需要自己在偏好设置里面打开这项功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">y^2^=4<br></code></pre></td></tr></table></figure><p>y2=4</p><h3 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h3><p>Typora语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">以:开始，然后输入表情的英文单词,以：结尾，将直接输入该表情.例如：<br>:smile<br>:cry<br>:happy<br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>开头|+列名+|+列名+|+换行键，创建一个2*2表格，<code>Ctrl+Enter</code>可建立新行。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">|第一列|第二列|<br></code></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>输入 <code>***</code> 或者 <code>---</code>,按换行键换行，即可绘制一条水平线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">***---<br></code></pre></td></tr></table></figure><hr><p>上下是水平线</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>开头&gt;表示，空格+文字，按换行键换行，双按换行跳出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt; 引注1<br>&gt; ···<br>&gt; 引注2<br>&gt;还有一行，双按换行键跳出引注模式<br></code></pre></td></tr></table></figure><p>示例：</p><blockquote><p>引注1<br>···<br>引注2还有一行，双按换行键跳出引注模式</p></blockquote><p>普通引用</p><blockquote><p>空格 + 引用文字：在引用的文字前加&gt;+空格即可，引用可以嵌套。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt; 引用文本前使用 [大于号+空格]<br>&gt; 这行可以不加，新起一行都要加上哦<br>&gt;这是引用的内容<br>&gt;&gt;这是引用的内容<br></code></pre></td></tr></table></figure><p>示例：</p><blockquote><p>引用文本前使用 [大于号+空格]这行可以不加，新起一行都要加上哦<br>这是引用的内容<br>这是引用的内容</p></blockquote><p>列表中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">* 第一项   <br>&gt; 引用1    <br>&gt; 引用2<br>* 第二项<br></code></pre></td></tr></table></figure><p>示例：</p><ul><li>第一项</li></ul><blockquote><p>引用1引用2</p></blockquote><ul><li>第二项</li></ul><p>引用里嵌套引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt; 最外层引用<br>&gt; &gt; 多一个 <br>&gt; 嵌套一层引用<br>&gt; &gt; &gt; 可以嵌套很多层<br></code></pre></td></tr></table></figure><p>引用里嵌套列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt; - 这是引用里嵌套的一个列表<br>&gt; - 还可以有子列表<br>&gt;     * 子列表需要从 - 之后延后四个空格开始<br></code></pre></td></tr></table></figure><p>引用里嵌套代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;     同样的，在前面加四个空格形成代码块<br></code></pre></td></tr></table></figure><blockquote><p>或者使用 ``` 形成代码块</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 脚注</span><br><span class="hljs-string"></span><br><span class="hljs-string">在需要添加脚注的文字后面+[+^+序列+]，注释的产生可以鼠标放置其上单击自动产生，添加信息</span><br><span class="hljs-string"></span><br><span class="hljs-string">或人工添加+[+^+序列+]+:</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><span class="hljs-string">``</span>text<br>脚注产生的方法[^footnote].<br>[^footnote]:这个就是<span class="hljs-string">&quot;脚注&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>脚注的产生方法[1]</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接<br>输入网址，单击链接，展开后可编辑<br>ctr+单击，打开链接<br>例如：<a href="https://link.zhihu.com/?target=https://www.baidu.com">https://www.baidu.com</a></p><p>常用链接方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">文字链接 [链接名称](http://链接网址)网址链接 &lt;http://链接网址&gt;<br></code></pre></td></tr></table></figure><p>示例效果：百度</p><p>超链接</p><p>格式1：用[ ]括住要超链接的内容，紧接着用( )括住超链接源+名字，超链接源后面+超链接命名<br>同样ctrl+单击，打开链接例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">这是[百度](https://www.baidu.com)官网<br></code></pre></td></tr></table></figure><p>这是 百度官网格式2：超链接 title可加可不加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">This is [an example](http://example.com/ &quot;Title&quot;) inline link.<br>[This link](http://example.net/) has no title attribute.<br></code></pre></td></tr></table></figure><p>This is an example inline link.This link has no title attribute.</p><p>高级链接技巧</p><p>使用[+超链接文字+]+[+标签+]，创建可定义链接<br>ctrl+单击，打开链接。示例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">这是[百度][id][id]:https://www.baidu.com<br></code></pre></td></tr></table></figure><p>这是百度示例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">这个链接用 1 作为网址变量 [Google][1].<br>这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].<br>然后在文档的结尾为变量赋值（网址）  <br>[1]: http://www.google.com/  <br>[yahoo]: http://www.yahoo.com/<br></code></pre></td></tr></table></figure><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>用&lt;&gt;括住url，可手动设置url对于标准URLs，可自动识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;www.baidu.com&gt;<br></code></pre></td></tr></table></figure><p>&lt;<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a></p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>开头*/+/- 加空格+文字，可以创建无序序列，换行键换行，删除键+shift+tab跳出<br>开头1.加空格+后接文字，可以创建有序序列例：</p><ul><li>第一个无序序列</li><li>第二个无序序列</li><li>······</li></ul><ol><li>第一个有序序列</li><li>第二个有序序列</li><li>······</li></ol><p>可选序列</p><p>开头序列+空格+[ ]+空格+文字，换行键换行，删除键+shift+tab跳出例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- [ ] 第一个可选序列<br>- [ ] 第二个可选序列<br>- [ ] 第三个可选序列<br>- [x] 第四个可选序列<br></code></pre></td></tr></table></figure><ul><li>第一个可选序列</li><li>第二个可选序列</li><li>第三个可选序列</li><li>第四个可选序列<br>总结：先输入减号，然后输入空格，之后就变成了黑色圆点，在输入[]，在中间加个空格，回车就可以注：任务列表无快捷键，可以点击菜单栏段落，任务列表。</li></ul><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><blockquote><p>Typora文本文档中有使用图片内容，如果需要发布在各个兼容Markdown的软件平台，需要预先上传文档中的图片至图床，再通过对图床的图片链接调用，才能正常显示，否则各个平台将无法看到该文档图片。<br>免费图床网址：<a href="https://link.zhihu.com/?target=https://sm.ms/">https://sm.ms/</a>图床设置：[Typora图床自动上传图片设置篇]</p></blockquote><ol><li>手动添加：跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![图片名称](http://图片网址)<br></code></pre></td></tr></table></figure><ol><li>当然，你也可以像网址那样对图片网址使用变量</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">这个链接用 1 作为网址变量 [Google][1].<br>然后在文档的结尾位变量赋值（网址） <br><br>[1]: http://www.google.com/logo.png<br></code></pre></td></tr></table></figure><ol><li>除了以上2种方式之外，还可以直接将图片拖拽进来，自动生成链接。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">![显示的文字](C:\Users\Hider\Desktop\echart.png &quot;图片标题&quot;)<br>![显示的文字](C:\Users\Hider\Desktop\echart.png)<br></code></pre></td></tr></table></figure><h2 id="二、Typora图床设置篇章"><a href="#二、Typora图床设置篇章" class="headerlink" title="二、Typora图床设置篇章"></a>二、Typora图床设置篇章</h2><p>Typora文本文档中有使用图片内容，如果需要发布在各个兼容Markdown的软件平台，需要预先上传文档中的图片至图床，再通过对图床的图片链接调用，才能正常显示，否则各个平台将无法看到该文档图片。</p><blockquote><p>图床意义：就是专门用来存放图片，同时允许你把图片对外连接的网上空间，不少图床都是免费的。</p></blockquote><p>图床工具，就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具。</p><p>Typora文件偏好属性&gt;上传服务设定&gt;选择PicGo-Core（command line&gt;选择下载更新如图一</p><p><img src="https://pic1.zhimg.com/v2-c94e3203acb34c2248b4b4cc36cfda8c_b.jpg" alt="img">图一</p><p>图二为更新下载完成状态</p><p><img src="https://pic2.zhimg.com/v2-65389866fb0aae9443c3e8787c8666d5_b.jpg" alt="img">图二</p><p>图三打开配置文件后的文件config.json</p><p><img src="https://pic4.zhimg.com/v2-613d1e6d34d329ce61c687d272d5d203_b.jpg" alt="img">图三</p><p>图四为图床网站，自己注册新的账号</p><p><img src="https://pic2.zhimg.com/v2-cc8839b95d32fc2aa034b93355fe9f41_b.jpg" alt="img">图四</p><p>如图图五找到账号中相应的token，若没有，生成即可</p><p><img src="https://pic2.zhimg.com/v2-e9f78eee9697588f06b6018b7172df79_b.jpg" alt="img">图五</p><p>按照图六格式添加相应的内容代码后保存</p><p><img src="https://pic1.zhimg.com/v2-1b80c13d0095786732be0d9f0fc15be0_b.jpg" alt="img">图六</p><p>回到偏好设置如图一中的验证图片上传选项功能，若出现图七提示，说明，图床自动上传功能设置成功。</p><p><img src="https://pic3.zhimg.com/v2-5cd68ecdd2e4471a9d2a0ba40233d65e_b.jpg" alt="img">图七</p><ol><li>这个就是脚注 ↩</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于如何快速阅读和整理文献的相关经验</title>
    <link href="/2021/11/12/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%92%8C%E6%95%B4%E7%90%86%E6%96%87%E7%8C%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BB%8F%E9%AA%8C%E3%80%82/"/>
    <url>/2021/11/12/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E5%92%8C%E6%95%B4%E7%90%86%E6%96%87%E7%8C%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E7%BB%8F%E9%AA%8C%E3%80%82/</url>
    
    <content type="html"><![CDATA[<h1 id="李沐大神分享关于如何快速阅读和整理文献的相关经验"><a href="#李沐大神分享关于如何快速阅读和整理文献的相关经验" class="headerlink" title="李沐大神分享关于如何快速阅读和整理文献的相关经验"></a>李沐大神分享关于如何快速阅读和整理文献的相关经验</h1><p>本文整理自 B 站视频：<a href="https://www.bilibili.com/video/BV1nA41157y4">https://www.bilibili.com/video/BV1nA41157y4</a></p><h2 id="本文的主要内容包括："><a href="#本文的主要内容包括：" class="headerlink" title="本文的主要内容包括："></a>本文的主要内容包括：</h2><h3 id="1、读文献的目的"><a href="#1、读文献的目的" class="headerlink" title="1、读文献的目的"></a>1、读文献的目的</h3><h3 id="2、整理论文的技巧和工具"><a href="#2、整理论文的技巧和工具" class="headerlink" title="2、整理论文的技巧和工具"></a>2、整理论文的技巧和工具</h3><h3 id="3、工具相关的教程"><a href="#3、工具相关的教程" class="headerlink" title="3、工具相关的教程"></a>3、工具相关的教程</h3><p>这里我做了相关的总结和规划，并收集了一些相关工具的教程。如果对你有所帮助，也欢迎给我三连，让我知道这些对我们都很重要！</p><p>以后看到一些优质的内容，我也会努力分享给大家，无论大家是在科研或者工作中，希望都能有所收获。</p><h4 id="一、明确你读文献的目的是什么"><a href="#一、明确你读文献的目的是什么" class="headerlink" title="一、明确你读文献的目的是什么"></a>一、明确你读文献的目的是什么</h4><p>不同阶段的目的是不同的</p><p>1）在学生时代，读论文的主要的目的是对一两个我的研究方向了如指掌，包括了对最重要的论文反复研读，了解其中每一句话在说什么，并且能够重复他们的实验</p><p>2）在工作之后，目的是对 5-10 个我比较感兴趣的研究方向了解他们的最新的进展，这样子我能够去思考我们团队接下来的研究方向，以及在技术讨论的时候，我能给大家指出这是一篇相关的论文，大家可以去看一下</p><h4 id="二、整理论文的技巧和工具"><a href="#二、整理论文的技巧和工具" class="headerlink" title="二、整理论文的技巧和工具"></a>二、整理论文的技巧和工具</h4><p>把一个领域里面我想读的论文放在一个markdown文件里面（这里推荐可以使用typora软件，支持不同系统），同时也把我的笔记放在这个里面。我用 markdown 的原因主要是因为它简单、便携性、而且软件支持也不错（例如支持latax-公式、mermaid-流程图 等等），不需要用特别复杂的文献管理软件</p><p>举个例子：</p><p>这个是我在几个月前读video相关的文献（如下图所示），做了一个笔记，可以看到这个 markdown 文件里面就是一个列表，每一项就是一篇论文，每一项的第一行是他的论文的标题、作者发表的地方、年份以及一些链接包括了本地下载好的pdf的链接、最后是它的引用数</p><p>我们知道引用数还在很大程度上反映了一篇论文的重要程度 特别是对一个新的领域我们不熟悉的话，引用数是一个判断这篇论文是不是值得现在读的一个很好的标准</p><p>通常来说是比较简单 可能就几句话的样子，也可能会包括了一些重要的图重要的公式在这里面markdown对 latax支持比较好而且对插图也有一定的支持。如果我们想插入一篇新的想读短论文的话 我们就把它的链接放在最后就行了</p><p>这里大佬自己写了一个小软件能够检测哪个 markdown文件被修改，并把里面插入在 url 里面的论文下载下来，并且将它的论文的标题，作者以及引用数全部自动生成好。（未分享出来）</p><p>小技巧：</p><p>有时候一个领域里面的重要论文比较多的时候，我也会去画一个图，把比较重要的论文之间相互联系起来</p><p>我们用的是 mermaid 的这个脚本语言 ，它能够很方便的插入一些连接图 这个是它的源代码 它嵌入在markdown里面 可以自动生成出下面这张图出来。</p><p>这里面一个方块就是一篇论文 一个箭头表示是下面一个论文是如何改进上面一个论文的 并且有一点简简单单的注释。</p><p>最后 我一般需要平板来读论文 我用的是12 9寸的ipad 这样子能够尽量的跟一个论文打印的纸张的大小差不多，什么文档文件 以及下载好的pdf都会被同步到dropbox里面，我们在 ipad 直接打开，不仅能够看我的笔记 而且能够直接点击pdf的链接，打开pdf在ipad上直接阅读。</p><h4 id="三、工具的整理和相关的入门教程"><a href="#三、工具的整理和相关的入门教程" class="headerlink" title="三、工具的整理和相关的入门教程"></a>三、工具的整理和相关的入门教程</h4><p>上面的内容就是李沐大神的分享，下面是我针对视频中提到的一些工具，进行相应的整理。</p><h5 id="1、markdown工具选择"><a href="#1、markdown工具选择" class="headerlink" title="1、markdown工具选择"></a>1、markdown工具选择</h5><p>这里推荐 typora ，官网：<a href="https://www.typora.io/">https://www.typora.io/</a></p><p>根据自己的电脑系统选择合适的软件</p><p><a href="https://sspai.com/post/54912">https://sspai.com/post/54912</a> （含大量操作的动画）</p><h5 id="3、typora-中-mermaid-教程"><a href="#3、typora-中-mermaid-教程" class="headerlink" title="3、typora 中 mermaid 教程"></a>3、typora 中 mermaid 教程</h5><p><a href="https://www.runoob.com/note/47651">https://www.runoob.com/note/47651</a></p><p>我稍微试了一下</p>]]></content>
    
    
    
    <tags>
      
      <tag>Typora，论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习</title>
    <link href="/2021/11/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是机器学习"><a href="#1-什么是机器学习" class="headerlink" title="1.什么是机器学习"></a>1.什么是机器学习</h1><h2 id="机器学习阐述"><a href="#机器学习阐述" class="headerlink" title="机器学习阐述"></a>机器学习阐述</h2><p>机器学习是很多种<strong>方法和模型</strong>的总称。<br>        <strong>神经网络是一种机器学习模型</strong>，可以说是目前最火的一种。<br>        深度神经网络就是层数比较多的神经网络。<br>        深度学习就是使用了<strong>深度神经网络</strong>的机器学习。</p><blockquote><p>机器学习算法是人工智能技术的主要算法之一，根据学习方法可以将其分为传统机器学习和深度学习（人工智能标准化白皮书2019）。传6地球物理学进展统的机器学习算法有逻辑回归、朴素贝叶斯、支持向量机、随机森林、决策树、人工神经网络等，需要人工提取特征。深度学习是机器学习领域的最新分支研究，是基于深度神经网络的学习，能够自动提取特征，具体算法包括卷积神经网络、循环神经网络、递归神经网络、深度玻尔兹曼机、深度置信网络等（唐伟等，2019）。</p><p>ＨｉｎｔｏｎａｎｄＳａｌａｋｈｕｔｄｉｎｏｖ（２００６）提出“深度学习（ｄｅｅｐｌｅａｒｎｉｎｇ）”的概念，证明了深层神经网络的可训练性，展现了深层神经网络更强大的特征提取和非线性拟合能力。</p></blockquote><p>机器学习(MachineLearning，ML)是一门多领域的交叉学科，涉及概率论、统计学、线性代数、算法等多门学科。它专门研究计算机如何<strong>模拟和学习人的行为</strong>，以获取新的知识或技能，<strong>重新组织已有的知识结构</strong>使之不断完善自身的性能。</p><p>机器学习已经有了十分广泛的应用，例如：数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人运用。</p><p>机器学习的算法分为两大类：监督学习和无监督学习。</p><p>监督学习即在机器学习过程中提供对错指示。一般是在数据组中包含最终结果(0，1)，通过算法让机器自己减少误差。这一类学习主要应用于分类和预测(Regression&amp;Classify)。监督学习从给定的训练数据集中学习出一个目标函数，<strong>当新的数据到来时，可以根据这个函数预测结果</strong>。监督学习的训练集要求包括输入和输出，也可以说包括特征和目标，训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。</p><p>非监督学习又称归纳性学习(Clustering)，利用K方式(KMean)建立中心(Centriole)，通过循环和递减运算(Iteration&amp;Descent)来减小误差，达到分类的目的。</p><h2 id="利用机器学习的预测模型来解决问题共有六个基本步骤"><a href="#利用机器学习的预测模型来解决问题共有六个基本步骤" class="headerlink" title="利用机器学习的预测模型来解决问题共有六个基本步骤"></a>利用机器学习的预测模型来解决问题共有六个基本步骤</h2><p>·定义问题：研究和提炼问题的特征，以帮助我们更好地理解项目的目标。</p><p>·数据理解：通过描述性统计和可视化来分析现有的数据。</p><p>·数据准备：对数据进行格式化，以便于构建一个预测模型。</p><p>·评估算法：通过一定的方法分离一部分数据，用来评估算法模型，并选取一部分代表数据进行分析，以改善模型。</p><p>·优化模型：通过调参和集成算法提升预测结果的准确度。</p><p>·结果部署：完成模型，并执行模型来预测结果和展示。</p><h1 id="2-优势"><a href="#2-优势" class="headerlink" title="2.优势"></a>2.优势</h1><h2 id="传统检测强对流"><a href="#传统检测强对流" class="headerlink" title="传统检测强对流"></a>传统检测强对流</h2><p>强对流监测预报，目前仍大量依靠传统的统计结果和预报员经验。长期的应用结果表明，以上方法具有较大的局限性。首先，不同季节、不同地势分布、不同气候背景区域之间，强对流天气发生发展条件与特征阈值范围必然会存在差异，难以使用一套统一的特征物理量阈值组合来实现不同区域的分类强对流天气的预报（王婷波等，２０２０）；其次，天气预报过程中需要使用大量数据，依靠预报员统计或者主观提取特征物理量和阈值范围，难以完全发现数据中有价值的细节信息或者细微差别，特别是一些中小尺度信息；再次，强对流天气复杂多变，如果预报员对于强对流发生发展规律认识不够深刻、全面，也会忽视其中的有效信息。传统基于物理机理的统计模型等客观方法，由于基于主观认识建立，也难以避免地存在上述问题。近年来，以深度学习为代表的机器学习算法的兴起，有效结合各类气象大数据，已经成为强对流天气预报的有效手段（＾１〇〇〇￥６１＂１１６１３１，２０１７；１＾（：１ｓｔｅｉｎｅｔａｌ，２０１９）。与浅层神经网络、支持向量机等传统机器学习算法相比，深度神经网络不仅能够为复杂非线性系统提供建模，更能够为模型提供更高的抽象层次，从而提高模型的特征提取能力；其优势在于能以更加紧凑简洁的方式来表达比浅层网络大得多的函数集合，并在图像识别、语音处理等领域相比传统方法的性能有了显著提升（Ｋｒｉｚｈｅｖｓｋｙｅｔａｌ，２０１２ＬｅＣｕｎａｎｄＢｅｎｇｉｏ，１９９5；Ｓｚｅｇｅｄｙｅｔａｌ，２０１３）。</p><h2 id="机器学习检测"><a href="#机器学习检测" class="headerlink" title="机器学习检测"></a>机器学习检测</h2><p>机器学习算法，特别是深度学习，需要大量的历史数据进行建模并训练，从而从历史数据中学习到规律。天气预报，经过长时间的发展，积累了海量历史观测数据、数值预报模式数据，具备“大数据”属性，能够为机器学习提供训练所需的大量数据，因此，一直以来，机器学习在天气预报领域有众多成功应用（karpatneetal，2019）。</p><h1 id="3-机器学习在气象领域的应用"><a href="#3-机器学习在气象领域的应用" class="headerlink" title="3.机器学习在气象领域的应用"></a>3.机器学习在气象领域的应用</h1><p>以深度学习为代表的机器学习算法取得突破性进展，并且在气象领域的应用范围更加广泛，基本覆盖了<strong>观测、预报、服务</strong>等所有气象业务</p><h2 id="识别窄带弱回波"><a href="#识别窄带弱回波" class="headerlink" title="识别窄带弱回波"></a>识别窄带弱回波</h2><p>徐月飞（2020）等通过雷达回波绕雷达中心旋转不变性以及所有不同走向的窄带弱回波都能在某个旋转角度转化为垂直走向这两大特点，基于FasterRCNN和Incep⁃tionV2，提出了改进的深度卷积网络阵风锋识别算法(d-NNGFDA)，将已有数据进行360°每间隔10°进行旋转，并且只对垂直走向的窄带弱回波进行标记，实现了数据量的扩充，降低了窄带雷达回波的识别复杂度。</p><h2 id="识别强对流、雷暴"><a href="#识别强对流、雷暴" class="headerlink" title="识别强对流、雷暴"></a>识别强对流、雷暴</h2><h3 id="对流天气预报"><a href="#对流天气预报" class="headerlink" title="对流天气预报"></a>对流天气预报</h3><h4 id="对流天气预报的深度网络模型"><a href="#对流天气预报的深度网络模型" class="headerlink" title="对流天气预报的深度网络模型"></a>对流天气预报的深度网络模型</h4><p>目前应用到对流天气预报的深度网络模型包括三种：一种是卷积神经网络，通过将输入的格点天气要素看成是图像的形式，通过图像滤波器进行特征学习，充分考虑到空间结构的相关，但缺点是缺乏处理序列数据的能力，只适合处理“定长”数据。另一种是循环神经网络，这种经常应用于自然语言处理的模型通过一种自回归结构，能够灵活地处理序列数据，在时间维度上进行有效的学习，缺点也较为明显，和多层感知机一样，只能把输入特征用一维的向量进行表征，这样就丢失了格点数据固有的空间特征，学习能力较弱。最后一种是将上述两种模型进行不同形式的结合，能同时学习到空间和时间的特征，更加适合解决对流天气预测的问题，卷积长短期记忆单元模型和本研究的卷积ＧＲＵ 模型均属于这一类网络。</p><h4 id="对流天气预报方法"><a href="#对流天气预报方法" class="headerlink" title="对流天气预报方法"></a>对流天气预报方法</h4><p>目前使用广泛的对流天气预报方法是基于雷达回波的外推技术和数值天气预报模式，但是这两种方法均存在不足之处（周康辉等，2021）。总的来说，雷达回波外推在临近预报方面还是存在一定缺陷。数值天气预报是指根据大气实际情况，在一定的初始和边界条件下，通过大型计算机做数值计算，求解描述天气演变过程的流体力学和热力学方程组，预测未来一定时段的大气运动状态和天气现象的方法。数值预报虽然已经在气象领域得到广泛应，但也有其自身的局限性（Ｗｅｉｓｍａｎ，ｅｔ　ａｌ，２０１０）。特别是在临近预报应用方面准确率低，不够成熟，且需要复杂的物理方程计算，在精细化预测上难以满足准确性和实时性的需求</p><p>近年来，气象研究人员尝试使用深度学习方法来进行强对流临近预报。Pulukool等（2020）基于自动编码器和卷积神经网络分别构建了两种深度学习冰雹预报模型，采用TRMM卫星资料和CMWF再分析资料，利用对流位能、对流抑制能、1-3km风切变和暖云区厚度4个气象因子进行冰雹的识别、定位和预报。杨仲江等（2020）采用雷达回波数据训练基于编码器-解码器序列结构的ConvLSTM深度学习模型，对反射率因子的时空变化进行外推，根据闪电发生概率与雷达回波反射率因子之间的相关性对闪电事件进行预警。中国气象局、中国科学院大学和国家气象中心基于数值天气预报数据，合作开发了一种针对强对流天气的深度学习目标预测方案，包括短时强降水、冰雹、对流阵风和雷暴。研究者利用五年的强天气观测结果对美国国家环境预报中心（NationalCentersforEnvironmentalPrediction,NCEP）全球分析资料（FinalOperationalGlobalAnalysis,FNL）进行标注，然后为每种类型的天气选择大量标记样本进行模型训练。该方案以1000-200hPa高度的温度、气压、湿度和风场以及数十种对流物理参数为预测指标，构建并训练了六层卷积神经网络模型，以获取最佳模型权重。在此基础上，将全球预报系统（GlobalForecastSystem,GFS）的预报数据作为输入数据，利用CNN模型对强对流天气进行预测。该方案也比较了CNN模型与其他传统方法的预报性能。实验结果表明，与支持向量机、随机森林等传统机器学习算法相比，深度CNN算法能够自动提取强对流天气的非线性特征，具有更好的预测性能；与预报员主观观测结果相比，深度CNN算法对雷暴、短时强降水、冰雹、对流阵风的TS得分分别提高了16.1%、33.2%、178%、55.7%，预报有明显改善（ZhouKetal.，2019）。——张敬林，薛珂，杨智鹏，张峰，张人禾，杨杰，封国林．人工智能与物联网在大气科学领域中的应用．地球物理学进展.</p><p>郑益勤等(2020) 利用Himawari8卫星图像， 构建了用深度信念网络(DBN )进行强对流云团自动识别的方法， 该方法可以有效识别处于初生到消散不同阶段的强对流云团， 并在一定程度上去除卷云</p><h3 id="雷暴大风"><a href="#雷暴大风" class="headerlink" title="雷暴大风"></a>雷暴大风</h3><p>李海峰（2018）设计并实现了四种雷暴大风识别网络模型。分别是简单卷积神经网络模型、空间上下文循环卷积神经网络模型、时间循环卷积神经网络模型，以及综合两种模型优点的时空循环卷积神经网络模型，设计实验对四种模型进行严格的实验对比。针对雷暴大风识别问题设计的网络模型，结合飑线分割方法，在5000 个雷暴大风测试样本上的识别准确率达到83.2%，相比气象领域的传统方法有明显优势。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在气象领域，Lee等人根据当地雷达信息和降水数据通过径向基神经网络，预测了24小时后的降雨量[6]；</p><p>Robert等在降雨数值分析的基础上，引入了人工神经网络进行局部地区降雨分析[7]；</p><p>Luk等人使用多层前反馈神经网络、偏循环神经网络和时间延迟神经网络3种方法对帕拉玛塔河流域<br>上游暴雨量进行了预测，表明选用这3种模型用来进行分析预测是可行的[8]；</p><p>Chau等将极限学习机与马尔科夫蒙特卡洛方法、Copula和Bat算法结合，实现了巴基斯坦3个农业带的降雨分析，取得了很好的结果[9]；</p><p>韩婷婷、时玮域[10]等人使用SVM方法对大雾天气进行预测，在大雾预测方面实现了新的突破。黄建伟等采用XGBoost集成学习算法，采用多层雷达数据进行降雨分类问题分析搭建了雷达回波与降雨分析系统，并投入日常气象工作中使用。</p><blockquote><p>张敬林，薛珂，杨智鹏，张峰，张人禾，杨杰，封国林．人工智能与物联网在大气科学领域中的应用．地球物理学进展.</p></blockquote><p>机器学习方法如人工神经网络、自组织映射网络分类器、支持向量机分类器和随机森林分类器等成功应用于云识别和分类（张成伟，2019）。作为机器学习中的热点算法，深度学习在图像识别领域取得显著成果，该算法能够从数据中分层次地学习到具备代表性和判别性的语义特征（Chenetal.,2014），利用卷积神经网络、深度信念网络等可以在卫星云图中识别云的类型和判断降水情况等。近年来，深度学习在云识别中引起了广泛关注并且取得一定进展。Xie等（2019）提出了一种新型深度CNN模型SegCloud，用于基于地面观测的精确云图像分割。SegCloud模型具有对称的编码-解码结构，编码器网络将低层云特征图像转化为低分辨率的高层云特征图像，解码器网络将获得的高层云特征图像映射回与输入图像相同的分辨率，最后softmax分类器进行逐像素分类并输出分割结果。研究人员还建立了一个包含400张全天空图像和人工标签的云分割数据库，用于训练SegCloud模型。大量实验结果证明，SegCloud模型能够有效、准确地对地面全天候成像仪获取的全天空图像进行自动云分割，该模型具有强大的云特征识别能力和优越的云特征提取技术，云分割性能明显优于传统方法。AfzaliGorooh等（2020）建立了一个深度神经网络云分类模型DeepCTC（DeepNeuralNetworkCloud-TypeClassification）。该模型根据GOES-16气象卫星上先进基线成像仪（AdvancedBaselineImager,ABI）的高时空和多光谱图像数据进行云分类，使用CloudSat卫星上的云廓线雷达（CloudProfilingRadar,CPR）和GOES-16ABI在美国连续地区（CONtiguousUnitedStates,CONUS）的观测数据进行训练和测试。研究人员对该模型进行了多种模拟实验。飓风哈维事件的ABI模拟图像的结果表明，使用该模型可以实现快速准确的云类型监测；哈维事件的多雷达/多传感器（Multi-Radar/Multi-Sensor,MRMS）降水率数据表明，该模型能够识别深对流云、雨层云等雨云以及估算其降水潜力。此外研究人员还使用该模型评估了卫星遥感降水产品PERSIANN-CCS对不同云类型降水量估算的性能。大量实验表明，DeepCTC模型通过简单、灵活而准确的算法可以快速识别云的类型，对高层云、高积云、积云，雨层云，深对流云和高云等多种云型的分类结果表现良好，对低云的分类效果较差。ZhangX等（2020）提出一种提取对流云的新方法，构建了仅由1×1卷积组成的3ONet深度网络用于提取光谱特征，以及深度对称密集连接全卷积网络SDFCNs用于提取几何特征，使用双流网络将光谱特征和几何特征相结合以提取对流云。实验使用葵花8卫星云图对深度学习框架进行验证，结果表明该方法在对流云提取任务中表现优秀。郑益勤等（2020）基于深度信念网络进行强对流云团自动识别任务的研究，提取葵花8卫星图像的光谱特征和纹理特征，然后参考CloudSat卫星的云分类产品自动构建样本集，利用该样本集进行模型训练，确定参数和结构之后进行云团识别并对识别结果进行后处理。最终结果表明，DBN模型能够有效提高不同阶段强对流云团的识别精度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>气象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>while计算一个人活了几天</title>
    <link href="/2021/11/07/while%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%B4%BB%E4%BA%86%E5%A4%9A%E4%B9%85/"/>
    <url>/2021/11/07/while%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%B4%BB%E4%BA%86%E5%A4%9A%E4%B9%85/</url>
    
    <content type="html"><![CDATA[<h1 id="while-计算一个人活了几天"><a href="#while-计算一个人活了几天" class="headerlink" title="while-计算一个人活了几天"></a>while-计算一个人活了几天</h1><p>主思路：对每一年都进行判断（即需要用到循环，这里用while比较合适），然后一天一天地相加。</p><p>*变量的取名要清晰</p><p>*每个月加完后，初始日为0；每年加完后，初始月为0.</p><p>*c语言中 d=n? 29:28;      一个判断： d=n吗？</p><ol><li>等于，d=29</li><li>不等于，d=28</li></ol><p>这是一个条件表达式，满足条件，执行：前的，不满足，执行后边的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">long</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// count用于存放一共活了多少天</span><br>        <span class="hljs-keyword">int</span> year1, year2; <span class="hljs-comment">// year1是你的生日年份，year2是今天的年份</span><br>        <span class="hljs-keyword">int</span> month1, month2;<br>        <span class="hljs-keyword">int</span> day1, day2;<br>        <span class="hljs-keyword">int</span> days[] = &#123;<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的生日（如1988-05-20）：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;year1, &amp;month1, &amp;day1);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入今年日期（如2016-03-28）：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;year2, &amp;month2, &amp;day2);<br><br>        <span class="hljs-keyword">while</span> (year1 &lt;= year2)<br>        &#123;<br>                days[<span class="hljs-number">1</span>] = (year1 % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (year1 % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year1 % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)) ? <span class="hljs-number">29</span> : <span class="hljs-number">28</span>;<br> <span class="hljs-comment">///对是否为闰年进行判断，同时对重新赋值。</span><br><br>                <span class="hljs-keyword">while</span> (month1 &lt;= <span class="hljs-number">12</span>)<br>                &#123;<br>                        <span class="hljs-keyword">while</span> (day1 &lt;= days[month1 - <span class="hljs-number">1</span>])<br>                        &#123;<br>                                <span class="hljs-keyword">if</span> (year1 == year2 &amp;&amp; month1 == month2 &amp;&amp; day1 == day2)<br>                                <span class="hljs-comment">//此个if很关键，即在每次年月日判断的终点里不断检查是不是到了今年的日期</span><br>                                &#123;<br>                                        <span class="hljs-keyword">goto</span> FINISH; <span class="hljs-comment">// 跳出多层循环才被迫用goto语句</span><br>                                &#125;<br>                                day1++;<br>                                count++;<br>                        &#125;<br>                        day1 = <span class="hljs-number">0</span>;<br>                        month1++;<br>                &#125;<br>                month1 = <span class="hljs-number">0</span>;<br>                year1++;<br>        &#125;<br><br>FINISH: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你在这个世界上总共生存了%d天\n&quot;</span>, count);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>       2.0版本：可计算如果活到80岁还有几天生命和生命已用百分比。</code></pre><p>在判断的末枝进行两个判断：1、是否到今年；</p><pre><code>                                      2、是否到80岁那年</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">long</span> count1 = <span class="hljs-number">0</span>, count2; <span class="hljs-comment">// count用于存放一共活了多少天</span><br>        <span class="hljs-keyword">int</span> year1, year2, year3; <span class="hljs-comment">// year1是你的生日年份，year2是今天的年份</span><br>        <span class="hljs-keyword">int</span> month1, month2, month3;<br>        <span class="hljs-keyword">int</span> day1, day2, day3;<br>        <span class="hljs-keyword">int</span> days[] = &#123;<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的生日（如1988-05-20）：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;year1, &amp;month1, &amp;day1);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入今天的日期（如2016-03-28）：&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;year2, &amp;month2, &amp;day2);<br><br>        year3 = year1 + <span class="hljs-number">80</span>;<br>        month3 = month1;<br>        day3 = day1;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>                days[<span class="hljs-number">1</span>] = (year1 % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> || (year1 % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year1 % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)) ? <span class="hljs-number">29</span> : <span class="hljs-number">28</span>;<br>                <span class="hljs-keyword">while</span> (month1 &lt;= <span class="hljs-number">12</span>)<br>                &#123;<br>                        <span class="hljs-keyword">while</span> (day1 &lt;= days[month1 - <span class="hljs-number">1</span>])<br>                        &#123;<br>                                <span class="hljs-keyword">if</span> (year1 == year2 &amp;&amp; month1 == month2 &amp;&amp; day1 == day2)<br>                                &#123;<br>                                        count2 = count1;<br>                                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你在这个世界上总共生存了%d天\n&quot;</span>, count2);<br>                                &#125;<br><br>                                <span class="hljs-keyword">if</span> (year1 == year3 &amp;&amp; month1 == month3 &amp;&amp; day1 == day3)<br>                                &#123;<br>                                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;如果能活到80岁，你还剩下%d天\n&quot;</span>, count1 - count2);<br>                                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你已经使用了%.2f\%的生命，请好好珍惜剩下的时间！\n&quot;</span>, (<span class="hljs-keyword">double</span>)count2 / count1 * <span class="hljs-number">100</span>);<br>                                        <span class="hljs-keyword">goto</span> FINISH;<br>                                &#125;<br><br>                                day1++;<br>                                count1++;<br>                        &#125;<br>                        day1 = <span class="hljs-number">0</span>;<br>                        month1++;<br>                &#125;<br>                month1 = <span class="hljs-number">0</span>;<br>                year1++;<br>        &#125;<br><br>FINISH: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>附：自己写的1.0版本的垃圾代码</p><p>感想：想法没多大问题，分步计算，有点复杂。在每一步进行计算的时候要想好这步干的是什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> a,b,c,x,y,z,m,n,num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> j[<span class="hljs-number">12</span>]=&#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br><span class="hljs-keyword">int</span> i[<span class="hljs-number">12</span>]=&#123;<span class="hljs-number">31</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你的生日（如1988-05-20）：&quot;</span>);<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br> <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入现在日期（如2016-03-28）：&quot;</span>);<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>,&amp;x,&amp;y,&amp;z);<br><br><span class="hljs-keyword">if</span> (a%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;a%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>||a%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>)<br><br>&#123;<br><br><span class="hljs-keyword">for</span> (m=i[b<span class="hljs-number">-1</span>]-c;b&lt;<span class="hljs-number">12</span>;b++)<br>&#123;<br>m=i[b]+m;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(m=c;b&lt;<span class="hljs-number">12</span>;b++)<br>&#123;<br>m=j[b]+m;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (a=a+<span class="hljs-number">1</span>;a&lt;x;a++)<br>&#123;<br><span class="hljs-keyword">if</span> ((a%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;a%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||(a%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>))<br>&#123;<br>m=m+<span class="hljs-number">366</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>m=m+<span class="hljs-number">365</span>;<br>&#125;<br>&#125;<br>a=x;<br>b=y;<br>c=z;<br><span class="hljs-keyword">if</span> ((a%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;a%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||(a%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>))<br>&#123;<br><span class="hljs-keyword">for</span> (n=c;b&gt;=<span class="hljs-number">2</span>;b--)<br>&#123;<br>n=i[b<span class="hljs-number">-2</span>]+n;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(n=c;b&gt;=<span class="hljs-number">2</span>;b--)<br>&#123;<br>n=j[b<span class="hljs-number">-2</span>]+n;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你在这个世界上已经生存了%d天&quot;</span>,m+n);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>post:<br>  meta:<br>    author:  # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值<br>      enable: false<br>    date:  # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期<br>      enable: true<br>      format: “dddd, MMMM Do YYYY, h:mm a”  # 格式参照 ISO-8601 日期格式化<br>    wordcount:  # 字数统计<br>      enable: true<br>      format: “{} 字”  # 显示的文本，{}是数字的占位符（必须包含)，下同<br>    min2read:  # 阅读时间<br>      enable: true<br>      format: “{} 分钟”<br>    views:  # 阅读次数<br>      enable: false<br>      source: “leancloud”  # 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风<br>      format: “{} 次”</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言，while语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
